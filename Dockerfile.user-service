# Multi-stage build para user-service
FROM node:18-alpine AS builder

# Instalar dependências do sistema
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copiar arquivos de configuração
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Copiar código fonte
COPY libs/ libs/
COPY apps/user-service/ apps/user-service/

# Instalar dependências
RUN npm ci --only=production && npm cache clean --force

# Build da aplicação
RUN npm run build:shared
RUN npm run build:user-service

# Estágio de produção
FROM node:18-alpine AS production

# Criar usuário não-root
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

WORKDIR /app

# Copiar apenas os arquivos necessários
COPY --from=builder --chown=nestjs:nodejs /app/dist/libs/shared ./dist/libs/shared
COPY --from=builder --chown=nestjs:nodejs /app/dist/apps/user-service ./dist/apps/user-service
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./

# Mudar para usuário não-root
USER nestjs

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Comando para iniciar a aplicação
CMD ["node", "dist/apps/user-service/main"]
