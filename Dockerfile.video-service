# Multi-stage build para video-service
FROM node:18-alpine AS builder

# Instalar dependências do sistema incluindo FFmpeg
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    ffmpeg \
    ffmpeg-dev

WORKDIR /app

# Copiar arquivos de configuração
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Copiar código fonte
COPY libs/ libs/
COPY apps/video-service/ apps/video-service/

# Instalar dependências
RUN npm ci --only=production && npm cache clean --force

# Build da aplicação
RUN npm run build:shared
RUN npm run build:video-service

# Estágio de produção
FROM node:18-alpine AS production

# Instalar FFmpeg no estágio de produção
RUN apk add --no-cache ffmpeg

# Criar usuário não-root
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

WORKDIR /app

# Criar diretórios necessários
RUN mkdir -p uploads temp outputs && \
    chown -R nestjs:nodejs uploads temp outputs

# Copiar apenas os arquivos necessários
COPY --from=builder --chown=nestjs:nodejs /app/dist/libs/shared ./dist/libs/shared
COPY --from=builder --chown=nestjs:nodejs /app/dist/apps/video-service ./dist/apps/video-service
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./

# Mudar para usuário não-root
USER nestjs

# Expor porta
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Comando para iniciar a aplicação
CMD ["node", "dist/apps/video-service/main"]
