services:
  # --- SERVIÇOS DE INFRAESTRUTURA ---

  database:
    image: postgres:14-alpine
    container_name: fiap_postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: fiap_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672" # Porta para a aplicação
      - "15672:15672" # Porta para a interface de gerenciamento
    networks:
      - app-network

  # --- SERVIÇOS DA APLICAÇÃO ---

  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: user-service # Passa o nome do app para o Dockerfile
    container_name: fiap_user_service
    command: dist/apps/user-service/main # Comando para iniciar este serviço específico
    ports:
      - "4001:4001"
    environment:
      - PORT=4001
      - DB_HOST=database # Usa o nome do serviço da rede interna do Docker
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_ACCESS_EXPIRES_IN=${JWT_ACCESS_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
    depends_on:
      - database # Garante que o banco de dados inicie antes deste serviço
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  video-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: video-service # Passa o nome do app para o Dockerfile
    container_name: fiap_video_service
    command: dist/apps/video-service/main # Comando para iniciar este serviço específico
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      # URLs para comunicação interna entre serviços
      - USER_SERVICE_URL=http://user-service:4001 # Usa o nome do serviço e a porta interna
      # Configs do RabbitMQ
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      # Usa o nome do serviço 'rabbitmq'
      - RABBIT_VIDEO_QUEUE=video_processing_queue
    depends_on:
      - database
      - rabbitmq
      - user-service # Garante que o user-service inicie antes
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: fiap_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Desativa a segurança para ambiente de dev
    ports:
      - "9200:9200"
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: fiap_kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Aponta para o serviço do elastic
    networks:
      - app-network

volumes:
  postgres_data: # Volume para persistir os dados do banco de dados

networks:
  app-network: # Rede customizada para permitir a comunicação entre os contêineres por nome
    driver: bridge
