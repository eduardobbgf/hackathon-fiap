# .github/workflows/ci-cd.yml

name: CI/CD Pipeline for Monorepo

# --------------------------------------------------------------------------
# 1. TRIGGER CONFIGURATION
# --------------------------------------------------------------------------
# This workflow runs on:
# - Pushes to the 'main' or 'master' branch.
# - Pull Requests targeting the 'main' or 'master' branch.
on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]

# --------------------------------------------------------------------------
# 2. ENVIRONMENT VARIABLES
# --------------------------------------------------------------------------
# Centralized environment variables for the workflow.
env:
  # Replace 'your-dockerhub-username' with your actual Docker Hub username or organization.
  # Or use ghcr.io for GitHub Container Registry.
  REGISTRY: docker.io
  DOCKER_USERNAME: your-dockerhub-username
  USER_SERVICE_IMAGE_NAME: ${{ vars.DOCKER_USERNAME || 'your-dockerhub-username' }}/user-service
  VIDEO_SERVICE_IMAGE_NAME: ${{ vars.DOCKER_USERNAME || 'your-dockerhub-username' }}/video-service

# --------------------------------------------------------------------------
# 3. JOBS CONFIGURATION
# --------------------------------------------------------------------------
jobs:
  # -------------------------
  # JOB 1: LINT & TEST
  # -------------------------
  # This job ensures code quality before attempting to build anything.
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          # Cache npm dependencies for faster subsequent runs
          cache: "npm"

      # Step 3: Install all monorepo dependencies
      - name: Install dependencies
        run: npm install --frozen-lockfile

      # Step 4: Run linter across all projects
      # Replace 'lint' with your actual lint command from package.json
      - name: Run linter
        run: npm run lint -- --format=stylish

      # Step 5: Run tests across all projects
      # Replace 'test' with your actual test command
      - name: Run tests
        run: npm run test

  # -------------------------
  # JOB 2: BUILD & PUSH DOCKER IMAGES
  # -------------------------
  # This job builds the Docker images for each service and pushes them to a registry.
  # It only runs if the 'lint-and-test' job succeeds.
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    # This job depends on the successful completion of the lint-and-test job
    needs: lint-and-test
    # This job should only run on pushes to the main branch, not on pull requests.
    if: github.event_name == 'push'

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for advanced features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to the container registry
      # You must create a secret named DOCKER_PASSWORD in your GitHub repository settings.
      # For Docker Hub, this is an Access Token, not your password.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push the user-service image
      - name: Build and push user-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # Pass the APP_NAME build argument to our generic Dockerfile
          build-args: |
            APP_NAME=user-service
          push: true
          # Tag the image with 'latest' and a unique Git SHA
          tags: |
            ${{ env.USER_SERVICE_IMAGE_NAME }}:latest
            ${{ env.USER_SERVICE_IMAGE_NAME }}:${{ github.sha }}

      # Step 5: Build and push the video-service image
      - name: Build and push video-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            APP_NAME=video-service
          push: true
          tags: |
            ${{ env.VIDEO_SERVICE_IMAGE_NAME }}:latest
            ${{ env.VIDEO_SERVICE_IMAGE_NAME }}:${{ github.sha }}

      # Step 6: (Optional) Logout from Docker Hub
      - name: Logout from Docker Hub
        run: docker logout
